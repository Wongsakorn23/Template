# Generated by Selenium IDE
import pytest
import time
import json
import allure
from SC import take_screenshot
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities
from selenium.webdriver.chrome.options import Options

class Test1():
  def setup_method(self, method):
    #self.driver = webdriver.Remote(command_executor='http://192.168.41.66:4445', desired_capabilities=DesiredCapabilities.CHROME)
    self.driver = webdriver.Chrome()
    chrome_options = Options()
    chrome_options.add_argument('--headless')  # Enable headless mode
    chrome_options.add_argument('--no-sandbox')
    chrome_options.add_argument('--disable-dev-shm-usage')
    #self.driver = webdriver.Remote(command_executor='http://10.99.20.121:4445',options=chrome_options)
    #self.driver = webdriver.Chrome(options=chrome_options)
    self.driver.set_window_size(1920, 1080)
    self.driver.maximize_window()
    self.vars = {}
  
  def teardown_method(self, method):
    self.driver.quit()
  
  def wait_for_window(self, timeout = 2):
    time.sleep(round(timeout / 1000))
    wh_now = self.driver.window_handles
    wh_then = self.vars["window_handles"]
    if len(wh_now) > len(wh_then):
      return set(wh_now).difference(set(wh_then)).pop()
  
  def test_1(self):
    with allure.step("Open URL"):
      self.driver.get("https://www.susco.co.th/finance_statement.asp")
    try:
      time.sleep(2)
      self.driver.find_element(By.LINK_TEXT, "ยอมรับ").click()
      time.sleep(2)
      self.driver.find_element(By.ID, "language-link-en").click()
      time.sleep(2)
      self.driver.switch_to.frame(0)
      self.vars["window_handles"] = self.driver.window_handles
      self.driver.find_element(By.LINK_TEXT, "2023").click()
      self.vars["win4856"] = self.wait_for_window(2000)
      self.vars["root"] = self.driver.current_window_handle
      self.driver.switch_to.window(self.vars["win4856"])
      time.sleep(2)
      self.driver.find_element(By.LINK_TEXT, "Statement of Comprehensive Income").click()
      time.sleep(2)
      self.driver.find_element(By.LINK_TEXT, "Statement of Cash Flows").click()
      time.sleep(2)
      self.driver.find_element(By.LINK_TEXT, "Statement of Financial Position").click()
      time.sleep(2)
      self.driver.close()
      self.driver.switch_to.window(self.vars["root"])
      time.sleep(2)
      self.driver.switch_to.frame(0)
      self.vars["window_handles"] = self.driver.window_handles
      self.driver.find_element(By.LINK_TEXT, "2022").click()
      self.vars["win9962"] = self.wait_for_window(2000)
      self.driver.switch_to.window(self.vars["win9962"])
      time.sleep(2)
      self.driver.find_element(By.LINK_TEXT, "Statement of Comprehensive Income").click()
      time.sleep(2)
      self.driver.find_element(By.LINK_TEXT, "Statement of Cash Flows").click()
      time.sleep(2)
      self.driver.find_element(By.LINK_TEXT, "Statement of Financial Position").click()
      time.sleep(2)
      self.driver.close()
      self.driver.switch_to.window(self.vars["root"])
      time.sleep(2)
      self.driver.switch_to.frame(0)
      self.vars["window_handles"] = self.driver.window_handles
      self.driver.find_element(By.LINK_TEXT, "2021").click()
      self.vars["win8559"] = self.wait_for_window(2000)
      self.driver.switch_to.window(self.vars["win8559"])
      time.sleep(2)
      self.driver.find_element(By.LINK_TEXT, "Statement of Comprehensive Income").click()
      time.sleep(2)
      self.driver.find_element(By.LINK_TEXT, "Statement of Cash Flows").click()
      time.sleep(2)
      self.driver.find_element(By.LINK_TEXT, "Statement of Financial Position").click()
      time.sleep(2)
      self.driver.close()
      self.driver.switch_to.window(self.vars["root"])
      time.sleep(2)
      self.driver.find_element(By.CSS_SELECTOR, "#type_fin_income > .text-menu-finance").click()
      self.driver.switch_to.frame(0)
      self.vars["window_handles"] = self.driver.window_handles
      self.driver.find_element(By.LINK_TEXT, "2023").click()
      self.vars["win2333"] = self.wait_for_window(2000)
      self.driver.switch_to.window(self.vars["win2333"])
      time.sleep(2)
      self.driver.find_element(By.LINK_TEXT, "Statement of Cash Flows").click()
      time.sleep(2)
      self.driver.find_element(By.LINK_TEXT, "Statement of Financial Position").click()
      time.sleep(2)
      self.driver.find_element(By.LINK_TEXT, "Statement of Comprehensive Income").click()
      time.sleep(2)
      self.driver.close()
      self.driver.switch_to.window(self.vars["root"])
      time.sleep(2)
      self.driver.switch_to.frame(0)
      self.vars["window_handles"] = self.driver.window_handles
      self.driver.find_element(By.LINK_TEXT, "2022").click()
      self.vars["win7261"] = self.wait_for_window(2000)
      self.driver.switch_to.window(self.vars["win7261"])
      time.sleep(2)
      self.driver.find_element(By.LINK_TEXT, "Statement of Cash Flows").click()
      time.sleep(2)
      self.driver.find_element(By.LINK_TEXT, "Statement of Financial Position").click()
      time.sleep(2)
      self.driver.find_element(By.LINK_TEXT, "Statement of Comprehensive Income").click()
      time.sleep(2)
      self.driver.close()
      self.driver.switch_to.window(self.vars["root"])
      time.sleep(2)
      self.driver.switch_to.frame(0)
      self.driver.find_element(By.CSS_SELECTOR, ".color_1 > td:nth-child(4)").click()
      self.vars["window_handles"] = self.driver.window_handles
      self.driver.find_element(By.LINK_TEXT, "2021").click()
      self.vars["win2075"] = self.wait_for_window(2000)
      self.driver.switch_to.window(self.vars["win2075"])
      time.sleep(2)
      self.driver.find_element(By.LINK_TEXT, "Statement of Cash Flows").click()
      time.sleep(2)
      self.driver.find_element(By.LINK_TEXT, "Statement of Financial Position").click()
      time.sleep(2)
      self.driver.find_element(By.LINK_TEXT, "Statement of Comprehensive Income").click()
      time.sleep(2)
      self.driver.close()
      self.driver.switch_to.window(self.vars["root"])
      time.sleep(2)
      self.driver.find_element(By.CSS_SELECTOR, "#type_fin_cash > .text-menu-finance").click()
      self.driver.switch_to.frame(0)
      self.vars["window_handles"] = self.driver.window_handles
      self.driver.find_element(By.LINK_TEXT, "2023").click()
      self.vars["win257"] = self.wait_for_window(2000)
      self.driver.switch_to.window(self.vars["win257"])
      time.sleep(2)
      self.driver.find_element(By.LINK_TEXT, "Statement of Financial Position").click()
      time.sleep(2)
      self.driver.find_element(By.LINK_TEXT, "Statement of Comprehensive Income").click()
      time.sleep(2)
      self.driver.find_element(By.LINK_TEXT, "Statement of Cash Flows").click()
      time.sleep(2)
      self.driver.close()
      self.driver.switch_to.window(self.vars["root"])
      time.sleep(2)
      self.driver.switch_to.frame(0)
      self.vars["window_handles"] = self.driver.window_handles
      self.driver.find_element(By.LINK_TEXT, "2022").click()
      self.vars["win3860"] = self.wait_for_window(2000)
      self.driver.switch_to.window(self.vars["win3860"])
      time.sleep(2)
      self.driver.find_element(By.LINK_TEXT, "Statement of Financial Position").click()
      time.sleep(2)
      self.driver.find_element(By.LINK_TEXT, "Statement of Comprehensive Income").click()
      time.sleep(2)
      self.driver.find_element(By.LINK_TEXT, "Statement of Cash Flows").click()
      time.sleep(2)
      self.driver.close()
      self.driver.switch_to.window(self.vars["root"])
      self.driver.switch_to.frame(0)
      self.vars["window_handles"] = self.driver.window_handles
      self.driver.find_element(By.LINK_TEXT, "2021").click()
      self.vars["win3338"] = self.wait_for_window(2000)
      self.driver.switch_to.window(self.vars["win3338"])
      time.sleep(2)
      self.driver.find_element(By.LINK_TEXT, "Statement of Financial Position").click()
      time.sleep(2)
      self.driver.find_element(By.LINK_TEXT, "Statement of Comprehensive Income").click()
      time.sleep(2)
      self.driver.find_element(By.LINK_TEXT, "Statement of Cash Flows").click()
      time.sleep(2)
      self.driver.close()
      self.driver.switch_to.window(self.vars["root"])
      self.vars["window_handles"] = self.driver.window_handles
      self.driver.find_element(By.CSS_SELECTOR, ".finance_download_en").click()
      time.sleep(2)
      self.vars["win_new"] = self.wait_for_window(2000)
      self.driver.switch_to.window(self.vars["win_new"])
      time.sleep(2)
      assert self.driver.find_element(By.CSS_SELECTOR, ".big-headSubText").text == "DOWNLOAD FINANCIAL STATEMENTS"
      time.sleep(2)
      self.driver.close()
      self.driver.switch_to.window(self.vars["root"])
      time.sleep(2)
      self.driver.execute_script("window.scrollTo(0, 1000);")
      time.sleep(2)
      self.driver.find_element(By.ID, "submit_search").click()
      time.sleep(2)
      self.driver.find_element(By.CSS_SELECTOR, "#type_fin_balance > .text-menu-finance").click()
      time.sleep(2)
       
    except Exception as e:
        # If an assertion error occurs, capture a screenshot and attach it to the Allure report
        allure.attach(self.driver.get_screenshot_as_png(), name="Error Screenshot", attachment_type=allure.attachment_type.PNG)
        raise e 
